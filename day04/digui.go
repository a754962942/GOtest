package main

import "fmt"

//递归:函数自己调用自己
//递归适合处理那种问题相同或者问题规模越来越小的问题
//递归一定要有一个明确的退出条件
//3！ =3*2*1  =3*2！
//4！ = 4*3*2*1=4*3!
//5！ =5*4*3*2*1=5*4!

//计算n的阶乘

func digui(n int) int {
	if n <= 1 {
		return 1
	}
	return n * digui(n-1)
}


/*
一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶。
求该青蛙跳上一个 n 级的台阶总共有多少种跳法。



解题思路：
如果有一个台阶，那么只有一个跳法，跳一次
如果有两个台阶，那么有两种跳法，跳一次一阶或跳一次两阶
那么n阶台阶，跳一次一阶，剩下n-1阶
如果开始跳一次两阶剩下n-2阶。
把jump（n）记为跳台阶的函数
跳一次一阶，剩下n-1阶，跳法为jump(n-1)
跳一次两阶,剩下n-2阶，跳法为jump(n-2)
*/

func f(n int) int {
	if n == 1 {
		//如果只有1个台阶就一种走法
		return 1
	}
	if n == 2 {
		return 2
	}
	return f(n-1) + f(n-2)
}
func main() {
	sum := digui(5)
	fmt.Println(sum)
	fmt.Println(f(6))
}